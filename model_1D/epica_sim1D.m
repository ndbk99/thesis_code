function [sim_x, sim_n] = epica_sim1D(obj,Y,M,anf,br_win,plotting)
%
% FUNCTION: epica_sim(obj,Y,M,m)
%
% PURPOSE: use simple Euler's method to simulate data based on 1D
% stochastic ODE model
%
% INPUT: 
% - obj: DataSet object for the data you want to use
% - Y: number of "years" (sectors) to divide data into
% - M: number of "months" (subsections) to divide "years" into
% - m: offset in "years" for autocorrelation of f
%
% OUTPUT: 
% - sim_x: x-values for the resulting simulated data
% - sim_y: y-values generated by the simulation
%


    %% default to not removing backbone 

    if nargin == 4
        br_win = 0;
        plotting = 0;
    elseif nargin == 5
        plotting = 0;
    end
        
    
    %% make variables for loop

    % set up time interval and white noise for simulation loop
    global xx;
    delt = range(xx) / (Y*M);
    wx = randn(Y*M);
    i = 1;
    
    
    
    %% set initial value of simulation
    
    % background-removed case
    if br_win ~= 0
        sim_n(1) = 0;
        
    % regular case
    else
        sim_n(1) = obj.Y(1) - obj.data_mean;
    end
    
    
    %% unpack model parameters
    a = anf{1,:};
    N = anf{2,:};
    f = anf{3,:};
    
    
    
    %% run Euler's Method simulation
    for j=1:Y
        for k=1:M
            sim_n(i+1) = sim_n(i) + a(k)*sim_n(i)*delt + N(k)*wx(i)*sqrt(delt) + f(j)*delt;
            i = i + 1;
        end
    end
    
    % create array of x-values to go with simulated y-values
    sim_x = ( linspace(1,length(sim_n)+1,length(sim_n)) - length(sim_n) ) * range(obj.X) / length(sim_n);
    
    
    %% plot results and data
    
    if plotting
        
        % unpack data into arrays
        [matrix_x,matrix_y,~] = data2matrix(obj,Y,M,br_win);
        data_x = reshape(matrix_x',[],1);
        data_y = reshape(matrix_y',[],1);

        % get proper y limits for plot
        ymax = max(max(abs(data_y)),max(abs(sim_n)));

        tiledlayout("flow");
        
        % plot data
        nexttile
        plot(data_x,data_y,'Color','blue');
        xlim([-8*10^5,0]);
        ylim([-ymax, ymax]);
        title(sprintf("%s data\n",obj.data_name));
        
        % plot simulation
        nexttile
        plot(sim_x,sim_n,'Color','red');   
        xlim([-8*10^5,0]);
        ylim([-ymax, ymax]);
        title(sprintf("%s simulation - 1D model\n",obj.data_name));
        
    end
    
    
   
end

